plugins {
    id "com.jetbrains.python.envs" version "0.0.26"
}

apply plugin: 'com.android.application'
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"
apply plugin: 'kotlin-android'
apply plugin: "org.mozilla.telemetry.glean-gradle-plugin"

// Apply AGConnect plugin only for Hvr builds
if (getGradle().getStartParameter().getTaskRequests().toString() =~ /(h|H)vr/) {
    apply plugin: 'com.huawei.agconnect'
}

deps.telemetry.glean_unittests = "org.mozilla.telemetry:glean-forUnitTests:$project.ext.glean_version"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getCrashRestartDisabled = { ->
    if (gradle.hasProperty("userProperties.disableCrashRestart")) {
        return gradle."userProperties.disableCrashRestart"
    }
    return "false"
}

def getDevApplicationIdSuffix = { ->
    if (gradle.hasProperty("userProperties.simultaneousDevProduction")) {
        return gradle."userProperties.simultaneousDevProduction" == "true" ? "dev" : ""
    }
    return ""
}

def getUseDebugSigningOnRelease = { ->
    if (gradle.hasProperty("userProperties.useDebugSigningOnRelease")) {
        return gradle."userProperties.useDebugSigningOnRelease" == "true"
    }
    return false
}

def getOpenXRFlags = { ->
    if (gradle.hasProperty("userProperties.openxr")) {
        return gradle."userProperties.openxr" == "true" ? " -DOPENXR" : ""
    }
    return ""
}

def getOpenXRCMakeFlags = { ->
    if (gradle.hasProperty("userProperties.openxr")) {
        return gradle."userProperties.openxr" == "true" ? "-DOPENXR=ON" : ""
    }
    return ""
}

def getHVRAppId = { ->
    if (gradle.hasProperty("userProperties.HVR_APP_ID")) {
        return gradle."userProperties.HVR_APP_ID"
    }
    return ""
}

def getHVRApiKey = { ->
    if (gradle.hasProperty("userProperties.HVR_API_KEY")) {
        return gradle."userProperties.HVR_API_KEY"
    }
    return ""
}

def getHVRMLSpeechServices = { ->
    if (getHVRApiKey().isEmpty()) {
        return "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI }"
    } else {
        return "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI, " +
                " com.igalia.wolvic.speech.SpeechServices.HUAWEI_ASR }";
    }
}

def getMKApiKey = { ->
    if (gradle.hasProperty("userProperties.MK_API_KEY")) {
        return gradle."userProperties.MK_API_KEY"
    }
    return ""
}

def isChromiumAvailable = {
    if (gradle.hasProperty("userProperties.chromium_aar")) {
        return true
    }
    return false
}

def isWebKitAvailable = {
    if (gradle.hasProperty("userProperties.webkit_aar")) {
        return true
    }
    return false
}

// Glean: Generate markdown docs for the collected metrics.
ext.gleanGenerateMarkdownDocs = true
ext.gleanDocsDirectory = "$rootDir/docs"

android {
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
        applicationId "com.igalia.wolvic"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 73
        versionName "1.3.2"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Boolean", "DISABLE_CRASH_RESTART", getCrashRestartDisabled()
        buildConfigField "String", "AMO_COLLECTION", "\"fxr\""
        buildConfigField "Boolean", "WEBVIEW_IN_PHONE_UI", "false"
        buildConfigField "Boolean", "FXA_USE_CHINA_SERVER", "false"
        buildConfigField "String[]", "SPEECH_SERVICES", "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI }"
        buildConfigField "Boolean", "SUPPORTS_SYSTEM_NOTIFICATIONS", "false"
        buildConfigField "Boolean", "KIOSK_MODE_ALWAYS", "false"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -fexceptions -frtti -Werror" +
                         " -I" + file("src/main/cpp").absolutePath +
                         " -I" + file("src/main/cpp/vrb/include").absolutePath
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
        vectorDrawables.useSupportLibrary = true
    }

    project.archivesBaseName = "Wolvic"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig getUseDebugSigningOnRelease() ? debug.signingConfig : release.signingConfig
            buildConfigField 'String', 'PROPS_ENDPOINT', '"https://igalia.github.io/wolvic/props.json"'
            buildConfigField "String", "MK_API_KEY", "\"${getMKApiKey()}\""
        }
        debug {
            applicationIdSuffix getDevApplicationIdSuffix()
            pseudoLocalesEnabled true
            buildConfigField 'String', 'PROPS_ENDPOINT', '"https://igalia.github.io/wolvic/props.json"'
            buildConfigField "String", "MK_API_KEY", "\"\""
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    lintOptions {
        disable "ExtraTranslation"
    }

    flavorDimensions "platform", "abi", "country", "backend", "store"

    productFlavors {
        // Supported platforms
        oculusvr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags "-DOCULUSVR" + getOpenXRFlags()
                    arguments "-DVR_SDK_LIB=oculusvr-lib", "-DVR_SDK_EXTRA_LIB=ovrplatform-lib", "-DOCULUSVR=ON", getOpenXRCMakeFlags()
                }
            }
            manifestPlaceholders = [ headtrackingRequired:"false", permissionToRemove:"android.permission.RECEIVE_BOOT_COMPLETED" ]
        }

        wavevr {
            minSdkVersion build_versions.min_sdk_wave
            targetSdkVersion build_versions.target_sdk_wave
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/include").absolutePath +
                            " -DWAVEVR"
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON", "-DWAVE_SDK_VERSION=${versions.wavevr}"
                }
            }
            applicationIdSuffix ".internal"
        }

        wavevrStore {
            minSdkVersion build_versions.min_sdk_wave
            targetSdkVersion build_versions.target_sdk_wave
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/include").absolutePath +
                            " -DWAVEVR"
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON", "-DWAVE_SDK_VERSION=${versions.wavevr}"
                }
            }
        }

        picovr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DPICOVR"
                    arguments "-DPICOVR=ON"
                }
            }
            applicationIdSuffix ".internal"
        }

        picovrStore {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DPICOVR"
                    arguments "-DPICOVR=ON"
                }
            }
        }

        picoxr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DPICOXR -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DVR_SDK_LIB=picoxr-lib", "-DPICOXR=ON", "-DOPENXR=ON"
                }
            }
        }

        lynx {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DLYNX -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DLYNX=ON", "-DOPENXR=ON"
                }
            }
        }

        spaces {
            dimension "platform"
            minSdkVersion build_versions.min_sdk_spaces
            externalNativeBuild {
                cmake {
                    cppFlags " -DSPACES -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DSPACES=ON", "-DOPENXR=ON"
                }
            }
        }

        hvr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DHVR -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DVR_SDK_LIB=hvr-lib", "-DHVR=ON", "-DOPENXR=ON"
                }
            }
            buildConfigField "String", "HVR_APP_ID", "\"${getHVRAppId()}\""
            buildConfigField "String", "HVR_API_KEY", "\"${getHVRApiKey()}\""
            buildConfigField "String", "MK_API_KEY", "\"\""
            buildConfigField "String[]", "SPEECH_SERVICES", "${getHVRMLSpeechServices()}"
            buildConfigField "Boolean", "SUPPORTS_SYSTEM_NOTIFICATIONS", "true"
        }

        cn {
            dimension "country"
            buildConfigField "Boolean", "FXA_USE_CHINA_SERVER", "true"
            buildConfigField "Boolean", "KIOSK_MODE_ALWAYS", "true"
        }

        world {
            dimension "country"
        }

        noapi {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DVRBROWSER_NO_VR_API"
                    arguments "-DNOAPI=ON"
                }
            }
        }

        // Supported ABIs
        arm64 {
            dimension "abi"
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        x86_64 {
            dimension "abi"
            ndk {
                abiFilters "x86_64"
            }
        }

        // Supported Backends
        gecko {
            dimension "backend"
        }

        chromium {
            dimension "backend"
        }

        webkit {
            dimension "backend"
        }

        // Stores flavor
        generic {
            dimension "store"
        }

        appLab {
            dimension "store"
            externalNativeBuild {
                cmake {
                    cppFlags "-DSTORE_BUILD", "-DMETA_APP_ID=4812663595466206"
                }
            }
        }

        metaStore {
            dimension "store"
            applicationIdSuffix ".metastore"
            externalNativeBuild {
                cmake {
                    cppFlags "-DSTORE_BUILD", "-DMETA_APP_ID=5917120145021341"
                }
            }
        }
    }

    variantFilter { variant ->
        def platform = variant.getFlavors().get(0).name
        def abi = variant.getFlavors().get(1).name
        def country = variant.getFlavors().get(2).name
        def backend = variant.getFlavors().get(3).name
        def store = variant.getFlavors().get(4).name

        // Create x86_64 variants only for noapi platform
        if (abi == 'x86_64')
            variant.setIgnore(platform != 'noapi');

        // Create variants for China only for HVR platforms
        if (country == 'cn' && !platform.startsWith('hvr'))
            variant.setIgnore(true);

        // Create variants for chromium/webkit, only when they are available
        if (backend == 'chromium' && !isChromiumAvailable())
            variant.setIgnore(true);
        if (backend == 'webkit' && !isWebKitAvailable())
            variant.setIgnore(true);

        // MetaStore and AppLab only apply to oculusvr builds.
        if ((store == 'metaStore' || store == "appLab") && !platform.startsWith('oculusvr'))
            variant.setIgnore(true);
    }

    sourceSets {
        main {
            java.srcDirs = [
                    'app',
                    'src/common/shared',
                    'src/main/cpp/vrb/android/java'
            ]
        }

        release {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/debug/AndroidManifest.xml"
                                                           : manifest.srcFile
        }

        oculusvr {
            java.srcDirs = [
                    'src/oculusvr/java'
            ]
        }

        wavevr {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/jni"]
        }

        wavevrStore {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            assets.srcDirs = [
                    'src/wavevr/assets'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/jni"]
            manifest.srcFile "src/wavevr/AndroidManifest.xml"
        }

        picovr {
            java.srcDirs = [
                    'src/picovr/java'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/picovr"]
        }

        picovrStore {
            java.srcDirs = [
                    'src/picovr/java'
            ]
            assets.srcDirs = [
                    'src/picovr/assets'
            ]
            res.srcDirs = [
                    'src/picovr/res'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/picovr"]
            manifest.srcFile "src/picovr/AndroidManifest.xml"
        }

        hvr {
            java.srcDirs = [
                    'src/hvr/java'
            ]
            assets.srcDirs = [
                    'src/hvr/assets'
            ]
            res.srcDirs = [
                    'src/hvr/res'
            ]
        }

        lynx {
            manifest.srcFile "src/lynx/AndroidManifest.xml"
        }

        spaces {
            manifest.srcFile "src/spaces/AndroidManifest.xml"
        }

        noapi {
            java.srcDirs = [
                    'src/noapi/java'
            ]
        }

        gecko {
            java.srcDirs = [
                    'src/common/gecko'
            ]
        }

        chromium {
            java.srcDirs = [
                    'src/common/chromium'
            ]
        }

        webkit {
            java.srcDirs = [
                    'src/common/webkit'
            ]
        }
    }

    sourceSets.all {
        // oculusvr needs a specific manifest file by its buildtype.
        if (name.startsWith('oculusvr')) {
           if (name.toLowerCase().contains('debug')) {
                manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
           }

           if (name.toLowerCase().contains('release')) {
               manifest.srcFile getUseDebugSigningOnRelease()
                   ? "src/oculusvrArmDebug/AndroidManifest.xml"
                   : "src/oculusvrArmRelease/AndroidManifest.xml"
           }
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    aaptOptions {
        noCompress 'ja'
        // TODO: This statement should be moved under 'chromium' dimension or removed. So far, these
        // options are affected to every variants when`isChromiumAvailable()` is true.
        if (isChromiumAvailable()) {
            noCompress 'dat'
            noCompress 'bin'
            noCompress 'pak'
        }
    }

    buildFeatures {
        viewBinding true
        prefab true // enable prefab support for various SDK AAR
        dataBinding true
    }
}

configurations {
    jnaForTest
    armImplementation
    x86Implementation
}

repositories {
    flatDir {
        dirs 'aars'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.openwnn

    // Common
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel
    implementation deps.lifecycle.java8
    implementation deps.lifecycle.process
    implementation deps.support.annotations
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.support.vector_drawable
    implementation deps.support.viewpager2
    implementation deps.constraint_layout
    implementation deps.gson
    implementation deps.room.runtime
    annotationProcessor deps.room.compiler

    // Android Components
    implementation deps.android_components.browser_errorpages
    implementation deps.android_components.browser_search
    implementation deps.android_components.browser_state
    implementation deps.android_components.browser_storage
    implementation deps.android_components.browser_domains
    implementation deps.android_components.browser_icons
    implementation deps.android_components.service_accounts
    implementation deps.android_components.service_sync_logins
    implementation deps.android_components.mozilla_service_location
    implementation deps.android_components.ui_autocomplete
    implementation deps.android_components.concept_engine
    implementation deps.android_components.concept_fetch
    implementation deps.android_components.lib_fetch
    implementation deps.android_components.lib_dataprotect
    implementation deps.android_components.support_rustlog
    implementation deps.android_components.support_rusthttp
    implementation deps.android_components.support_webextensions
    implementation deps.android_components.support_ktx
    implementation deps.android_components.feature_accounts
    implementation deps.android_components.feature_webcompat
    implementation deps.android_components.feature_webcompat_reporter
    implementation deps.android_components.feature_addons
    implementation deps.android_components.glean
    implementation deps.app_services.rustlog

    // Kotlin dependency
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines
    implementation deps.kotlin.coroutines_jdk8

    // SQLite helper to handle DBs from assets
    implementation deps.sqlite.sqlite

    // DiskLRUCache used to cache snapshots
    implementation deps.disklrucache.disklrucache

    // Color picker library
    implementation deps.colorpicker

    // Required for targeting S+
    implementation deps.work.runtime
    implementation deps.work.runtime_ktx


    // Testing
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.espresso.core
    testImplementation deps.junit
    testImplementation deps.atsl.core
    testImplementation deps.robolectric
    testImplementation deps.app_services.rustlog
    testImplementation deps.android_components.support_test
    testImplementation deps.android_components.support_test_appservices
    jnaForTest deps.jna
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    testImplementation deps.telemetry.glean_unittests
    testImplementation deps.work.testing

    // MeetKai
    implementation fileTree(dir: "${project.rootDir}/libs/meetkai/", include: ['*.aar'])
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'net.lingala.zip4j:zip4j:1.3.2'
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // Pico
    picovrImplementation fileTree(dir: "${project.rootDir}/third_party/picovr/", include: ['*.aar'])
    picovrStoreImplementation fileTree(dir: "${project.rootDir}/third_party/picovr/", include: ['*.aar'])

    // HVR
    hvrImplementation fileTree(dir: "${project.rootDir}/third_party/hvr", include: ['*.jar'])
    hvrImplementation 'com.huawei.agconnect:agconnect-core-harmony:1.1.0.300'
    hvrImplementation 'com.huawei.agconnect:agconnect-core:1.6.0.300'
    hvrImplementation 'com.huawei.hms:hianalytics:6.3.2.300'
    hvrImplementation 'com.huawei.hms:ml-computer-voice-asr:3.1.0.300'
    hvrImplementation 'com.huawei.hms:location:6.2.0.300'
    hvrImplementation 'com.huawei.hms:push:6.5.0.300'

    // Lynx
    lynxImplementation fileTree(dir: "${project.rootDir}/third_party/lynx", include: ['*.aar'])

    // Snapdragon Spaces
    spacesImplementation fileTree(dir: "${project.rootDir}/third_party/spaces", include: ['*.aar'])

    // gecko
    def branch = "nightly" // "nightly" or "beta"
    geckoImplementation deps.gecko_view."${branch}_x86_64"
    geckoImplementation deps.gecko_view."${branch}_arm64"
    configurations.all {
        // TODO(jfernandez): Instead of solving the conflicts this way, we would need to determine which packages
        // are the culprit and define their dependencies so that we can let gradle to resolve them automatically.
        // See https://docs.gradle.org/current/userguide/dependency_resolution.html for details.
         resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin'
                    && details.requested.name.contains('kotlin-stdlib')) {
                details.useVersion '1.4.10';
            } else if (details.requested.group == 'org.jetbrains.kotlinx'
                    && details.requested.name.contains('coroutines')) {
                details.useVersion '1.4.2'
            }
         }
         resolutionStrategy.capabilitiesResolution.withCapability('org.mozilla.geckoview:geckoview') {
            def abi = getName().toLowerCase().contains('x86_64') ? 'x86_64' : 'arm64'
            def candidate = "geckoview-${branch}-${abi}"
            select(candidates.find { it.id.module.contains(candidate) })
        }
    }

    // chromium
    if (isChromiumAvailable()) {
        chromiumImplementation fileTree(dir: gradle."userProperties.chromium_aar", include: ['*.aar'])
        chromiumImplementation 'androidx.fragment:fragment:1.4.1'
    }

    // webkit
    if (isWebKitAvailable()) {
        webkitImplementation fileTree(dir: gradle."userProperties.webkit_aar", include: ['*.aar'])
    }
}

if (findProject(':servo')) {
    dependencies {
      oculusvrImplementation project(':servo')
    }
}

if (findProject(':wavesdk')) {
    dependencies {
        wavevrImplementation fileTree(dir: "${project.rootDir}/third_party/wavesdk/", include: ['*.aar'])
        wavevrStoreImplementation fileTree(dir: "${project.rootDir}/third_party/wavesdk/", include: ['*.aar'])
    }
}

if (gradle.hasProperty('geckoViewLocalArm') || gradle.hasProperty('geckoViewLocalX86')) {
    throw new GradleException("geckoViewLocal{Arm,X86} are deprecated: use geckoViewLocalTopsrcdir and geckoViewLocalTopobjdir")
}

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

androidComponents {
    onVariants(selector().all(), { variant ->
        // HVR packages for China must use different applicationIds.
        def hvrChinaBuildPattern = ~/hvr\p{Alnum}+Cn\p{Alnum}+(Release|Debug)/
        if (hvrChinaBuildPattern.matcher(variant.name).matches())
            variant.applicationId = variant.applicationId.get().replace('com.igalia','com.cn.igalia')
    })
}

// -------------------------------------------------------------------------------------------------
// MLS: Read token from local file if it exists
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    print("MLS token: ")

    try {
        def token = new File("${rootDir}/.mls_token").text.trim()
        buildConfigField 'String', 'MLS_TOKEN', '"' + token + '"'
        println "(Added from .mls_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'MLS_TOKEN', '""'
        println("X_X")
    }

    def platform = variant.productFlavors.get(0).name
    def country = variant.productFlavors.get(2).name

    // HVR packages for mainland china must only use HVR speech recognition system.
    // HVR packages for overseas should have 2D phone UI enabled.
    if (platform.toLowerCase().startsWith('hvr')) {
        if (country != 'cn')
            variant.buildConfigField "Boolean", "WEBVIEW_IN_PHONE_UI", "true"
        else
            variant.buildConfigField "String[]", "SPEECH_SERVICES", "{ com.igalia.wolvic.speech.SpeechServices.HUAWEI_ASR }"
    }
}
