import groovy.json.JsonSlurper

plugins {
    id "com.jetbrains.python.envs" version "0.0.31"
}

apply plugin: 'com.android.application'
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"
apply plugin: 'kotlin-android'
apply plugin: "org.mozilla.telemetry.glean-gradle-plugin"

// Apply AGConnect plugin only for Huawei builds
if (getGradle().getStartParameter().getTaskRequests().toString() =~ /[Hh]vr/
        || getGradle().getStartParameter().getTaskRequests().toString() =~ /[Vv]isionglass/) {
    apply plugin: 'com.huawei.agconnect'
}

deps.telemetry.glean_unittests = "org.mozilla.telemetry:glean-native-forUnitTests:$project.ext.glean_version"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def shouldUseStaticVersionCode = { ->
    if (gradle.hasProperty("userProperties.useStaticVersionCode")) {
        return gradle."userProperties.useStaticVersionCode" == "true"
    }
    return false
}

def getCrashRestartDisabled = { ->
    if (gradle.hasProperty("userProperties.disableCrashRestart")) {
        return gradle."userProperties.disableCrashRestart"
    }
    return "false"
}

def getDevApplicationIdSuffix = { ->
    if (gradle.hasProperty("userProperties.simultaneousDevProduction")) {
        return gradle."userProperties.simultaneousDevProduction" == "true" ? "dev" : ""
    }
    return ""
}

def getUseDebugSigningOnRelease = { ->
    if (gradle.hasProperty("userProperties.useDebugSigningOnRelease")) {
        return gradle."userProperties.useDebugSigningOnRelease" == "true"
    }
    return false
}

def getHVRAppId = { ->
    if (gradle.hasProperty("userProperties.HVR_APP_ID")) {
        return gradle."userProperties.HVR_APP_ID"
    }
    return ""
}

def getHVRApiKey = { ->
    def jsonFile = file('agconnect-services.json')

    if (jsonFile.exists()) {
        def parsedJson = new JsonSlurper().parseText(jsonFile.text)
        if (parsedJson.client && parsedJson.client.api_key) {
            return parsedJson.client.api_key
        }
    }
    return ""
}

def getHVRMLSpeechServices = { ->
    if (getHVRApiKey().isEmpty()) {
        return "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI }"
    } else {
        return "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI, " +
                " com.igalia.wolvic.speech.SpeechServices.HUAWEI_ASR }";
    }
}

def getMKApiKey = { ->
    if (gradle.hasProperty("userProperties.MK_API_KEY")) {
        return gradle."userProperties.MK_API_KEY"
    }
    return ""
}

def isChromiumAvailable = {
    if (gradle.hasProperty("localProperties.chromium_aar")) {
        return true
    }
    return false
}

def isWebKitAvailable = {
    if (gradle.hasProperty("localProperties.webkit_aar")) {
        return true
    }
    return false
}

// Glean: Generate markdown docs for the collected metrics.
ext.gleanGenerateMarkdownDocs = true
ext.gleanDocsDirectory = "$rootDir/docs"

android {
    namespace 'com.igalia.wolvic'
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
        applicationId "com.igalia.wolvic"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode generatedVersionCode
        versionName "1.7"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Boolean", "DISABLE_CRASH_RESTART", getCrashRestartDisabled()
        buildConfigField "String", "AMO_COLLECTION", "\"fxr\""
        buildConfigField "Boolean", "WEBVIEW_IN_PHONE_UI", "false"
        buildConfigField "Boolean", "CN_FIRST_RUN_IN_PHONE_UI", "false"
        buildConfigField "Boolean", "FXA_USE_CHINA_SERVER", "false"
        buildConfigField "String[]", "SPEECH_SERVICES", "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI }"
        buildConfigField "Boolean", "SUPPORTS_SYSTEM_NOTIFICATIONS", "false"
        buildConfigField "Float", "DEFAULT_DENSITY", "1.25f"
        buildConfigField "Float", "DEFAULT_WINDOW_DISTANCE", "0.0f"
        buildConfigField "Boolean", "ENABLE_PAGE_ZOOM", "false"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue 'string', 'app_name', 'Wolvic'
        resValue 'string', 'HOMEPAGE_URL', "https://wolvic.com/start"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -fexceptions -frtti -Werror" +
                         " -I" + file("src/main/cpp").absolutePath +
                         " -I" + file("src/main/cpp/vrb/include").absolutePath +
                         // CMake 3.10+ needs "-DANDROID" flag, since ANDROID
                         // flag has been removed in favor of __ANDROID__. But
                         // vrb still uses "#if defined(ANDROID)"
                         " -DANDROID"

                arguments "-DANDROID_STL=c++_shared"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
        vectorDrawables.useSupportLibrary = true
    }

    project.archivesBaseName = "Wolvic"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
            pickFirsts += ['**/libxul.so']
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig getUseDebugSigningOnRelease() ? debug.signingConfig : release.signingConfig
            buildConfigField 'String', 'PROPS_ENDPOINT', '"https://igalia.github.io/wolvic/props.json"'
            buildConfigField "String", "MK_API_KEY", "\"${getMKApiKey()}\""
        }
        debug {
            applicationIdSuffix getDevApplicationIdSuffix()
            pseudoLocalesEnabled true
            buildConfigField 'String', 'PROPS_ENDPOINT', '"https://igalia.github.io/wolvic/props.json"'
            buildConfigField "String", "MK_API_KEY", "\"\""
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            if (shouldUseStaticVersionCode()) {
                // Overrides any build created with a generated version code from now to 2115
                output.versionCodeOverride = 1_99_365_2300
            }
        }
    }

    productFlavors {
        // Supported platforms
        oculusvr {
            dimension "platform"
            targetSdkVersion build_versions.target_sdk_oculusvr
            externalNativeBuild {
                cmake {
                    cppFlags "-DOCULUSVR -DOPENXR"
                    arguments "-DVR_SDK_EXTRA_LIB=ovrplatform-lib", "-DOCULUSVR=ON", "-DOPENXR=ON"
                }
            }
            manifestPlaceholders = [ headtrackingRequired:"false", permissionToRemove:"android.permission.RECEIVE_BOOT_COMPLETED" ]
        }

        wavevr {
            minSdkVersion build_versions.min_sdk_wave
            targetSdkVersion build_versions.target_sdk_wave
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/include").absolutePath +
                            " -DWAVEVR"
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON", "-DWAVE_SDK_VERSION=${versions.wavevr}"
                }
            }
            applicationIdSuffix ".internal"
        }

        wavevrStore {
            minSdkVersion build_versions.min_sdk_wave
            targetSdkVersion build_versions.target_sdk_wave
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/include").absolutePath +
                            " -DWAVEVR"
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON", "-DWAVE_SDK_VERSION=${versions.wavevr}"
                }
            }
        }

        picoxr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DPICOXR -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DVR_SDK_LIB=picoxr-lib", "-DPICOXR=ON", "-DOPENXR=ON"
                }
            }
        }

        lynx {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DLYNX -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DLYNX=ON", "-DOPENXR=ON"
                }
            }
        }

        spaces {
            dimension "platform"
            targetSdkVersion build_versions.target_sdk_spaces
            externalNativeBuild {
                cmake {
                    cppFlags " -DSPACES -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DSPACES=ON", "-DOPENXR=ON"
                }
            }
        }

        aosp {
            dimension "platform"
            targetSdkVersion build_versions.target_sdk_aosp
            externalNativeBuild {
                cmake {
                    cppFlags " -DAOSP -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DAOSP=ON", "-DOPENXR=ON"
                }
            }
            buildConfigField "Float", "DEFAULT_DENSITY", "1.0f"
        }

        hvr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DHVR -DOPENXR -I" + file("src/openxr/cpp").absolutePath
                    arguments "-DVR_SDK_LIB=hvr-lib", "-DHVR=ON", "-DOPENXR=ON"
                }
            }
            buildConfigField "String", "HVR_APP_ID", "\"${getHVRAppId()}\""
            buildConfigField "String", "HVR_API_KEY", "\"${getHVRApiKey()}\""
            buildConfigField "String", "MK_API_KEY", "\"\""
            buildConfigField "String[]", "SPEECH_SERVICES", "${getHVRMLSpeechServices()}"
            buildConfigField "Boolean", "SUPPORTS_SYSTEM_NOTIFICATIONS", "true"
            buildConfigField "Boolean", "WEBVIEW_IN_PHONE_UI", "true"
            buildConfigField "Float", "DEFAULT_DENSITY", "1.0f"
        }

        noapi {
            dimension "platform"
            applicationIdSuffix ".noapi"
            resValue "string", "app_name", "Wolvic NoAPI"
            externalNativeBuild {
                cmake {
                    cppFlags " -DNOAPI"
                    arguments "-DNOAPI=ON"
                }
            }
        }

        visionglass {
            dimension "platform"
            applicationId "com.igalia.wolvic"
            applicationIdSuffix ".visionglass"
            resValue "string", "app_name", "Wolvic Vision"
            targetSdkVersion build_versions.target_sdk_visionglass
            externalNativeBuild {
                cmake {
                    cppFlags " -DVISIONGLASS"
                    arguments "-DVISIONGLASS=ON"
                }
            }
            buildConfigField "String", "HVR_API_KEY", "\"${getHVRApiKey()}\""
            buildConfigField "Float", "DEFAULT_DENSITY", "1.5f"
            buildConfigField "Float", "DEFAULT_WINDOW_DISTANCE", "1.0f"
        }

        // Supported ABIs
        arm64 {
            dimension "abi"
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        x64 {
            dimension "abi"
            ndk {
                abiFilters "x86_64"
            }
        }

        // Supported Backends
        gecko {
            dimension "backend"
            externalNativeBuild {
                cmake {
                    cppFlags " -DGECKO"
                    arguments "-DGECKO=ON"
                }
            }
        }

        chromium {
            dimension "backend"
            resValue "string", "app_name", "Wolvic Chromium"
            externalNativeBuild {
                cmake {
                    cppFlags " -DCHROMIUM"
                    arguments "-DCHROMIUM=ON"
                }
            }
            buildConfigField "Boolean", "ENABLE_PAGE_ZOOM", "true"
        }

        webkit {
            dimension "backend"
        }

        // Stores flavor
        generic {
            dimension "store"
        }

        appLab {
            dimension "store"
            externalNativeBuild {
                cmake {
                    cppFlags "-DSTORE_BUILD", "-DMETA_APP_ID=4812663595466206"
                }
            }
        }

        metaStore {
            dimension "store"
            applicationIdSuffix ".metastore"
            externalNativeBuild {
                cmake {
                    cppFlags "-DSTORE_BUILD", "-DMETA_APP_ID=5917120145021341"
                }
            }
        }

        mainlandChina {
            applicationId "com.cn.igalia.wolvic"
            dimension "store"
            buildConfigField "Boolean", "FXA_USE_CHINA_SERVER", "true"
            buildConfigField "Boolean", "WEBVIEW_IN_PHONE_UI", "true"
            buildConfigField "Boolean", "CN_FIRST_RUN_IN_PHONE_UI", "true"
        }
    }

    variantFilter { variant ->
        def platform = variant.getFlavors().get(0).name
        def abi = variant.getFlavors().get(1).name
        def backend = variant.getFlavors().get(2).name
        def store = variant.getFlavors().get(3).name

        // Create x64 variants only for noapi and aosp platforms
        if (abi == 'x64')
            variant.setIgnore(platform != 'noapi' && platform !='aosp');

        // Create variants for China only for HVR and Pico platforms
        if (store == 'mainlandChina' && !(platform.startsWith('hvr') || platform.startsWith('visionglass') || platform.startsWith('picoxr')))
            variant.setIgnore(true);

        // Create variants for chromium/webkit, only when they are available
        if (backend == 'chromium' && !isChromiumAvailable())
            variant.setIgnore(true);
        if (backend == 'webkit' && !isWebKitAvailable())
            variant.setIgnore(true);

        // MetaStore and AppLab only apply to oculusvr builds.
        if ((store == 'metaStore' || store == "appLab") && !platform.startsWith('oculusvr'))
            variant.setIgnore(true);
        
    }

    sourceSets {
        main {
            java.srcDirs = [
                    'app',
                    'src/common/shared',
                    'src/main/cpp/vrb/android/java'
            ]
        }

        release {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/debug/AndroidManifest.xml"
                                                           : manifest.srcFile
        }

        oculusvr {
            java.srcDirs = [
                    'src/oculusvr/java'
            ]
        }

        wavevr {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/jni"]
            packagingOptions {
                jniLibs.pickFirsts.add("lib/**/libwvr_api.so")
                jniLibs.pickFirsts.add("lib/**/liboverlay_api.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_internal_using_assimp.so")
                jniLibs.pickFirsts.add("lib/**/libdummy.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore_component.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_monitor.so")
                jniLibs.pickFirsts.add("lib/**/libdummy.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_runtime.so")
                jniLibs.pickFirsts.add("lib/**/libvr_jni.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore_component.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_runtime.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_ctf_internal_common.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_internal_using_assimp.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_ctf_internal_common.so")
                jniLibs.pickFirsts.add("lib/**/libvr_jni.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_monitor.so")
                jniLibs.pickFirsts.add("lib/**/libsvrapi.so")
            }
        }

        wavevrStore {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            assets.srcDirs = [
                    'src/wavevr/assets'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client-${versions.wavevr}/jni"]
            manifest.srcFile "src/wavevr/AndroidManifest.xml"
            packagingOptions {
                jniLibs.pickFirsts.add("lib/**/libwvr_api.so")
                jniLibs.pickFirsts.add("lib/**/liboverlay_api.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_internal_using_assimp.so")
                jniLibs.pickFirsts.add("lib/**/libdummy.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore_component.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_monitor.so")
                jniLibs.pickFirsts.add("lib/**/libdummy.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_runtime.so")
                jniLibs.pickFirsts.add("lib/**/libvr_jni.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore_component.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_runtime.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_ctf_internal_common.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_internal_using_assimp.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_ctf_internal_common.so")
                jniLibs.pickFirsts.add("lib/**/libvr_jni.so")
                jniLibs.pickFirsts.add("lib/**/libvrcore.so")
                jniLibs.pickFirsts.add("lib/**/libwvr_monitor.so")
                jniLibs.pickFirsts.add("lib/**/libsvrapi.so")
            }
        }

        hvr {
            java.srcDirs = [
                    'src/hvr/java',
                    'src/hvrcommon/java'
            ]
            assets.srcDirs = [
                    'src/hvr/assets'
            ]
            res.srcDirs = [
                    'src/hvr/res',
                    'src/hvrcommon/res'
            ]
        }

        lynx {
            manifest.srcFile "src/lynx/AndroidManifest.xml"
        }

        spaces {
            manifest.srcFile "src/spaces/AndroidManifest.xml"
        }

        aosp {
            manifest.srcFile "src/aosp/AndroidManifest.xml"
        }

        noapi {
            java.srcDirs = [
                    'src/noapi/java'
            ]
        }

        visionglass {
            java.srcDirs = [
                    'src/visionglass/java',
                    'src/hvrcommon/java'
            ]
            res.srcDirs = [
                    'src/visionglass/res',
                    'src/hvrcommon/res'
            ]
        }

        gecko {
            java.srcDirs = [
                    'src/common/gecko'
            ]
        }

        chromium {
            java.srcDirs = [
                    'src/common/chromium'
            ]
        }

        webkit {
            java.srcDirs = [
                    'src/common/webkit'
            ]
        }
    }

    sourceSets.configureEach { sourceSet ->
        // oculusvr needs a specific manifest file by its buildtype.
        def name = sourceSet.name
        if (name.startsWith('oculusvr')) {
           if (name.toLowerCase().contains('debug')) {
                manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
           }

           if (name.toLowerCase().contains('release')) {
               manifest.srcFile getUseDebugSigningOnRelease()
                   ? "src/oculusvrArmDebug/AndroidManifest.xml"
                   : "src/oculusvrArmRelease/AndroidManifest.xml"
           }
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }


    buildFeatures {
        flavorDimensions = [ "platform", "abi", "backend", "store" ]
        viewBinding true
        prefab true // enable prefab support for various SDK AAR
        dataBinding true
    }

    lint {
        disable 'ExtraTranslation'
    }

    aaptOptions {
        noCompress 'ja'
        noCompress 'dat'
        noCompress 'bin'
        noCompress 'pak'
    }
}

configurations {
    jnaForTest
    armImplementation
    x86Implementation
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Common
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel
    implementation deps.lifecycle.java8
    implementation deps.lifecycle.process
    implementation deps.support.annotations
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.support.vector_drawable
    implementation deps.support.viewpager2
    implementation deps.constraint_layout
    implementation deps.gson
    implementation deps.room.runtime
    annotationProcessor deps.room.compiler

    // Android Components
    implementation deps.android_components.browser_errorpages
    implementation deps.android_components.browser_state
    implementation deps.android_components.browser_storage
    implementation deps.android_components.browser_domains
    implementation deps.android_components.browser_icons
    implementation deps.android_components.feature_findinpage
    implementation deps.android_components.feature_search
    implementation deps.android_components.feature_toolbar
    implementation deps.android_components.service_accounts
    implementation deps.android_components.service_sync_logins
    implementation deps.android_components.mozilla_service_location
    implementation deps.android_components.ui_autocomplete
    implementation deps.android_components.concept_engine
    implementation deps.android_components.concept_fetch
    implementation deps.android_components.lib_fetch
    implementation deps.android_components.lib_dataprotect
    implementation deps.android_components.support_rustlog
    implementation deps.android_components.support_rusthttp
    implementation deps.android_components.support_webextensions
    implementation deps.android_components.support_ktx
    implementation deps.android_components.feature_accounts
    implementation deps.android_components.feature_webcompat
    implementation deps.android_components.feature_webcompat_reporter
    implementation deps.android_components.feature_addons
    implementation deps.android_components.glean
    implementation deps.android_components.preference

    // Kotlin dependency
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines
    implementation deps.kotlin.coroutines_jdk8

    // DiskLRUCache used to cache snapshots
    implementation deps.disklrucache.disklrucache

    // Color picker library
    implementation deps.colorpicker

    // Required for targeting S+
    implementation deps.work.runtime
    implementation deps.work.runtime_ktx

    // OpenXR standard loader
    implementation 'org.khronos.openxr:openxr_loader_for_android:1.0.34'

    // Testing
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.junit
    androidTestImplementation deps.espresso.core
    testImplementation deps.junit
    testImplementation deps.atsl.core
    testImplementation deps.robolectric
    testImplementation deps.android_components.support_test
    testImplementation deps.android_components.support_test_appservices
    jnaForTest deps.jna
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    testImplementation deps.telemetry.glean_unittests
    testImplementation deps.work.testing

    // MeetKai
    implementation fileTree(dir: "${project.rootDir}/libs/meetkai/", include: ['*.aar'])
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // AOSP
    aospImplementation 'androidx.games:games-activity:3.0.5'

    // HVR
    hvrImplementation fileTree(dir: "${project.rootDir}/third_party/hvr", include: ['*.jar'])
    hvrImplementation 'com.huawei.agconnect:agconnect-core-harmony:1.1.0.300'
    hvrImplementation 'com.huawei.agconnect:agconnect-core:1.9.1.301'
    hvrImplementation 'com.huawei.hms:hianalytics:6.3.2.300'
    hvrImplementation 'com.huawei.hms:ml-computer-voice-asr:3.1.0.300'
    hvrImplementation 'com.huawei.hms:location:6.2.0.300'
    hvrImplementation 'com.huawei.hms:push:6.5.0.300'

    // Snapdragon Spaces
    spacesImplementation fileTree(dir: "${project.rootDir}/third_party/spaces", include: ['*.aar'])

    // Vision Glass
    visionglassImplementation fileTree(dir: "${project.rootDir}/third_party/aliceimu/", include: ['*.aar'])
    visionglassImplementation fileTree(dir: "${project.rootDir}/third_party/hvr", include: ['*.jar'])
    visionglassImplementation 'com.huawei.agconnect:agconnect-core-harmony:1.1.0.300'
    visionglassImplementation 'com.huawei.agconnect:agconnect-core:1.9.1.301'
    visionglassImplementation 'com.huawei.hms:ml-computer-voice-asr:3.1.0.300'

    // HTC Vive
    if (!gradle.startParameter.taskNames.isEmpty() &&
            gradle.startParameter.taskNames.get(0).toLowerCase().contains("wavevr")) {
        configurations.maybeCreate("default")
        artifacts.add("default", file('wvr_client.aar'))

        def aarFilename = "wvr_client"

        // unzip aar
        def unzipDir = file("${rootDir}/third_party/wavesdk/build/${aarFilename}-${versions.wavevr}")
        def aarFile = file("${rootDir}/third_party/wavesdk/${aarFilename}.aar")
        if (aarFile != null) {
            copy {
                println 'unzip ' + aarFile
                from zipTree(aarFile)
                into unzipDir
            }
            wavevrImplementation fileTree(dir: "${rootDir}/third_party/wavesdk/", include: ['*.aar'])
            wavevrStoreImplementation fileTree(dir: "${rootDir}/third_party/wavesdk/", include: ['*.aar'])
        }
    }

    // gecko
    def branch = "nightly" // "release", "nightly" or "beta"
    geckoImplementation deps.gecko_view."${branch}_x86_64"
    geckoImplementation deps.gecko_view."${branch}_arm64"
    configurations.all {
         resolutionStrategy.capabilitiesResolution.withCapability('org.mozilla.geckoview:geckoview') {
            def abi = getName().toLowerCase().contains('x64') ? 'x86_64' : 'arm64'
            def candidate = branch == "release" ? "geckoview-${abi}" : "geckoview-${branch}-${abi}"
            select(candidates.find { it.id.module.contains(candidate) })
        }
    }

    // chromium
    if (isChromiumAvailable()) {
        chromiumImplementation fileTree(dir: gradle."localProperties.chromium_aar", include: ['*.aar'])
        chromiumImplementation 'androidx.fragment:fragment:1.8.3'
    }

    // webkit
    if (isWebKitAvailable()) {
        webkitImplementation fileTree(dir: gradle."localProperties.webkit_aar", include: ['*.aar'])
    }

    // openwnn (bundled because it is not published outside of JCenter, which is deprecated)
    implementation fileTree(dir: "${project.rootDir}/libs/openwnn/", include: ['*.aar'])
}

if (findProject(':servo')) {
    dependencies {
      oculusvrImplementation project(':servo')
    }
}

if (gradle.hasProperty('geckoViewLocalArm') || gradle.hasProperty('geckoViewLocalX86')) {
    throw new GradleException("geckoViewLocal{Arm,X86} are deprecated: use geckoViewLocalTopsrcdir and geckoViewLocalTopobjdir")
}

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (getGradle().getStartParameter().getTaskRequests().toString().toLowerCase().contains('x64')
            && gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdirX64')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdirX64"
    } else if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

// -------------------------------------------------------------------------------------------------
// MLS: Read token from local file if it exists
// -------------------------------------------------------------------------------------------------

android.applicationVariants.configureEach { variant ->
    try {
        def token = new File("${rootDir}/.mls_token").text.trim()
        buildConfigField 'String', 'MLS_TOKEN', '"' + token + '"'
        println "MLS_TOKEN added from .mls_token file"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'MLS_TOKEN', '""'
    }

    def platform = variant.productFlavors.get(0).name
    def store = variant.productFlavors.get(3).name

    // Default homepages and voice recognition services for China releases.
    // HVR packages for mainland china must only use HVR speech recognition system.
    if (store == "mainlandChina") {
        if (platform.toLowerCase().startsWith('hvr')) {
            variant.resValue 'string', 'HOMEPAGE_URL', '"https://wolvic.com/zh/start/index.html"'
            variant.buildConfigField "String[]", "SPEECH_SERVICES", "{ com.igalia.wolvic.speech.SpeechServices.HUAWEI_ASR }"
        } else if (platform.toLowerCase().startsWith('visionglass')) {
            variant.resValue 'string', 'HOMEPAGE_URL', '"https://wolvic.com/zh/start/hvg.html"'
            variant.buildConfigField "String[]", "SPEECH_SERVICES", "{ com.igalia.wolvic.speech.SpeechServices.HUAWEI_ASR }"
        } else if (platform.toLowerCase().startsWith('picoxr')) {
            variant.resValue 'string', 'HOMEPAGE_URL', '"https://wolvic.com/zh/start/pico.html"'
            variant.buildConfigField "String[]", "SPEECH_SERVICES", "{ com.igalia.wolvic.speech.SpeechServices.MEETKAI }"
        }
    } else if (platform.toLowerCase().startsWith('visionglass')) {
        // Adjust the applicationId so it matches what the store expects.
        variant.mergedFlavor.applicationIdSuffix ".world.visionglass"
    }

    // Append "Dev" to the app name for debug builds. We do it by directly modifying the resource
    // value so that this is visible from inside the app.
    if (variant.buildType.name == "debug") {
        variant.resValue "string", "app_name", variant.mergedFlavor.resValues.get("string/app_name").value + " (Dev)"
    }
}
